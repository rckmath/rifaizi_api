generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
  binaryTargets   = ["native", "linux-musl"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(uuid()) @db.Char(36)
  firebaseId String @unique

  email String       @unique @db.VarChar(320)
  name  String       @db.VarChar(100)
  role  UserRoleType @default(COMMON)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  raffles        Raffle[]
  paymentOptions PaymentOption[]
  participations RaffleOptionNumber[]
}

model Raffle {
  id        String @id @default(uuid()) @db.Char(36)
  numericId Int    @unique @default(autoincrement())

  ownerId String @db.Char(36)

  title       String
  description String
  prize       String

  remindMe Boolean @default(false)

  status RaffleStatus @default(CREATED)

  price         Decimal @db.Decimal(10, 2)
  fundingTarget Decimal @db.Decimal(10, 2)
  optionsQty    Int

  finishedAt           DateTime?
  prizeDrawAt          DateTime?
  startParticipationDt DateTime?
  limitParticipationDt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  paymentOptions RafflePaymentOption[]

  owner   User                 @relation(fields: [ownerId], references: [id])
  options RaffleOptionNumber[]
}

model RaffleOptionNumber {
  id       String  @id @default(uuid()) @db.Char(36)
  ownerId  String? @db.Char(36)
  raffleId String  @db.Char(36)

  num    Int
  alias  String
  status RaffleOptionIndicator @default(AVAILABLE)

  statusChangedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  owner  User?  @relation(fields: [ownerId], references: [id])
  raffle Raffle @relation(fields: [raffleId], references: [id])
}

model RafflePaymentOption {
  id              String @id @default(uuid()) @db.Char(36)
  userId          String @db.Char(36)
  raffleId        String @db.Char(36)
  paymentOptionId String @db.Char(36)

  raffle        Raffle        @relation(fields: [raffleId], references: [id])
  paymentOption PaymentOption @relation(fields: [paymentOptionId], references: [id])
}

model PaymentOption {
  id      String @id @default(uuid()) @db.Char(36)
  ownerId String @db.Char(36)

  alias    String
  key      String
  fullName String
  type     PaymentType     @default(PIX)
  subType  PaymentSubType?
  default  Boolean         @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  raffles RafflePaymentOption[]

  owner User @relation(fields: [ownerId], references: [id])
}

enum RaffleOptionIndicator {
  AVAILABLE
  RESERVED
  AWAITING_PAYMENT
  OWNED
}

enum RaffleStatus {
  CREATED
  IN_PROGRESS
  TO_DRAW
  DRAWN
  DELIVERED
  CANCELED
}

enum PaymentType {
  PIX
  BANK_ACCOUNT
  OTHER
}

enum PaymentSubType {
  CPF_CNPJ
  RANDOM_KEY
  PHONE_NUMBER
  EMAIL
}

enum UserRoleType {
  COMMON
  ADMIN
}
